{"version":3,"sources":["../src/client2.js"],"names":["dgram","require","protobuf","PORT","HOST","load","err","root","MovePointReponse","lookupType","AIServerConnectRequest","coverReqObj","result","playMsgObj","PlayerId","errMsg","verify","Error","playMsgErr","message","create","console","log","buffer","encode","finish","socket","Socket","playMsg","bufferPlay","connect","write","MovePointRequest","on","msg","decode","X"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,KAAR,CAAZ;;AAEA,IAAIC,WAAWD,QAAQ,YAAR,CAAf;AACA,IAAIE,OAAO,IAAX;AACA,IAAIC,OAAO,WAAX;;AAEAF,SAASG,IAAT,CAAc,aAAd,EAA6B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC9C,QAAID,GAAJ,EAAS;AACL,cAAMA,GAAN;AACH;AACD;;;;;AAKA,QAAIE,mBAAmBD,KAAKE,UAAL,CAAgB,sBAAhB,CAAvB;AACA,QAAIC,yBAAyBH,KAAKE,UAAL,CAAgB,4BAAhB,CAA7B;;AAEA,QAAIE,cAAc,EAAEC,QAAQ,GAAV,EAAlB;AACA,QAAIC,aAAa,EAAEC,UAAU,GAAZ,EAAjB;AACA,QAAIC,SAASP,iBAAiBQ,MAAjB,CAAwBL,WAAxB,CAAb;AACA,QAAII,MAAJ,EAAY;AACR,cAAME,MAAMF,MAAN,CAAN;AACH;;AAEDG,iBAAaR,uBAAuBM,MAAvB,CAA8BH,UAA9B,CAAb;AACA,QAAIE,MAAJ,EAAY;AACR,cAAME,MAAMF,MAAN,CAAN;AACH;;AAED,QAAII,UAAUX,iBAAiBY,MAAjB,CAAwBT,WAAxB,CAAd;AACAU,YAAQC,GAAR,CAAYH,OAAZ;AACA,QAAII,SAASf,iBAAiBgB,MAAjB,CAAwBL,OAAxB,EAAiCM,MAAjC,EAAb;AACA,QAAIN,UAAUI,MAAd;;AAEA,QAAIG,SAAS,IAAI1B,MAAM2B,MAAV,EAAb;;AAEA,QAAIC,UAAUlB,uBAAuBU,MAAvB,CAA8BP,UAA9B,CAAd;AACA,QAAIgB,aAAanB,uBAAuBc,MAAvB,CAA8BI,OAA9B,EAAuCH,MAAvC,EAAjB;;AAEAC,WAAOI,OAAP,CAAe3B,IAAf,EAAqBC,IAArB,EAA2B,YAAW;;AAEtCiB,gBAAQC,GAAR,CAAY,mBAAmBlB,IAAnB,GAA0B,GAA1B,GAAgCD,IAA5C;AACA;AACA;AACAuB,eAAOK,KAAP,CAAaF,UAAb;AAGH,KARG;;AAYA;AACA;AACA;AACA,QAAIG,mBAAmBzB,KAAKE,UAAL,CAAgB,sBAAhB,CAAvB;;AAGAiB,WAAOO,EAAP,CAAU,MAAV,EAAkB,UAAUC,GAAV,EAAe;AAC7B;AACAb,gBAAQC,GAAR,CAAYU,iBAAiBG,MAAjB,CAAwBD,GAAxB,EAA6BE,CAAzC;;AAEA;AACH,KALD;;AAQA;;AAEA;AACA;AACA;AACH,CAjED","file":"client2.js","sourcesContent":["// var dgram = require('dgram');\nvar dgram = require('net');\n\nvar protobuf = require(\"protobufjs\");\nvar PORT = 9602;\nvar HOST = '127.0.0.1';\n\nprotobuf.load(\"AIMsg.proto\", function (err, root) {\n    if (err) {\n        throw err;\n    }\n    /**\n     * 获取消息类型\n     * HelloCoverReq：构造请求实例\n     * HelloCoverRsp：构造响应实例\n     */\n    var MovePointReponse = root.lookupType(\"msg.MovePointReponse\");\n    var AIServerConnectRequest = root.lookupType(\"msg.AIServerConnectRequest\");\n\n    var coverReqObj = { result: 100};\n    var playMsgObj = { PlayerId: 777};\n    var errMsg = MovePointReponse.verify(coverReqObj);\n    if (errMsg) {\n        throw Error(errMsg);\n    }\n\n    playMsgErr = AIServerConnectRequest.verify(playMsgObj);\n    if (errMsg) {\n        throw Error(errMsg);\n    }\n\n    var message = MovePointReponse.create(coverReqObj);\n    console.log(message)\n    var buffer = MovePointReponse.encode(message).finish();\n    var message = buffer;\n\n    var socket = new dgram.Socket();\n\n    var playMsg = AIServerConnectRequest.create(playMsgObj);\n    var bufferPlay = AIServerConnectRequest.encode(playMsg).finish();\n\n    socket.connect(PORT, HOST, function() {\n\n    console.log('CONNECTED TO: ' + HOST + ':' + PORT);\n    // 建立连接后立即向服务器发送数据，服务器将收到这些数据 \n    // socket.write('I am Chuck Norris!');\n    socket.write(bufferPlay);\n\n\n});\n\n\n\n    //  var contentBuf1 = Buffer.concat([Buffer.from([0x01]), message]);\n    // //拼接结束标志\n    //     contentBuf1 = Buffer.concat([contentBuf1, Buffer.from([0x0D, 0x0A])]);\n    var MovePointRequest = root.lookupType(\"msg.MovePointRequest\");\n\n\n    socket.on(\"data\", function (msg) {\n        // console.log(\"[UDP-CLIENT] Received message: \" + HelloCoverRsp.decode(msg).reply + \" from \" + rinfo.address + \":\" + rinfo.port);\n        console.log(MovePointRequest.decode(msg).X);\n\n        //udpSocket = null;\n    });\n\n\n    // socket.on('error', function (err) {\n\n    //     console.log('socket err');\n    //     console.log(err);\n    // });\n});"]}