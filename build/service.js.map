{"version":3,"sources":["../src/service.js"],"names":["PORT","HOST","net","require","fs","protobuf","load","err","root","createServer","sock","AIServerConnectRequest","lookupType","console","log","remoteAddress","remotePort","on","data","setTimeout","length","jsonData","JSON","parse","test","readUInt16LE","msgId","readUInt32LE","slice","message","requestMsg","decode","PlayerId","AIMsg","MovePointRequest","AIServerConnectReponse","coverRspObj","X","Y","AIServerConnectReponseResult","result","errMsgRes","verify","errMsg","create","buffer","encode","finish","messageConnect","bufferConnect","index","msgIdRequest","bufIndex","Buffer","allocUnsafe","writeUInt16LE","bufMsgIdRequest","writeUInt32LE","msgLength","bufMsgLength","totalLength","concat","write","e","listen"],"mappings":"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","file":"service.js","sourcesContent":["var PORT = 9602;\nvar HOST = '127.0.0.1';\nvar net = require('net');\nvar fs = require('fs');\n\nvar protobuf = require(\"protobufjs\");\n\n\nprotobuf.load(\"AIMsg.proto\", function (err, root) {\n\n\n    if (err)\n        throw err;\n\n    // Obtain a message type\n    net.createServer(function(sock) {\n\n      var AIServerConnectRequest = root.lookupType(\"msg.AIServerConnectRequest\");\n\n      // 我们获得一个连接 - 该连接自动关联一个socket对象\n      console.log('CONNECTED: ' + sock.remoteAddress + ':' + sock.remotePort);\n\n      // 为这个socket实例添加一个\"data\"事件处理函数\n      // sock.on('connection',function(){\n      //           console.log(222433);\n\n      //   // console.log(AIServerConnectRequest.decode(data).PlayerId);\n      // });\n\n      sock.on('data', function(data) {\n        // fs.writeFileSync('./message.txt',data);\n\n        // console.log(AIServerConnectRequest.decode(data).PlayerId);\n\n        setTimeout(function() {\n          \n        \n\n        console.log('消息长度：' + data.length)\n        var jsonData = JSON.stringify(data);\n        jsonData = JSON.parse(jsonData)\n        var test = data\n        console.log('索引：' + test.readUInt16LE(0))\n        var msgId = test.readUInt32LE(2)\n        console.log('消息ID：' + msgId)\n        console.log('消息长度：' + test.readUInt32LE(6))\n\n        // var copy = new Buffer(jsonData);\n        data = data.slice(10,data.length)\n        // console.log(jsonData)\n        var message = '';\n        // try{\n\n          var requestMsg = AIServerConnectRequest.decode(data);\n\n          // if(typeof(requestMsg.PlayerId) != \"undefined\"){\n            console.log(\"游戏选手ID：\" + requestMsg.PlayerId)\n\n            var AIMsg = root.lookupType(\"msg.MovePointRequest\");\n            var MovePointRequest = AIMsg\n            var AIServerConnectReponse = root.lookupType(\"msg.AIServerConnectReponse\");\n\n            var coverRspObj = {\n                X: 100,\n                Y: 100\n            };\n\n            var AIServerConnectReponseResult = {\n                result:0\n            }\n            var errMsgRes = MovePointRequest.verify(AIServerConnectReponseResult);\n\n\n            var errMsg = MovePointRequest.verify(coverRspObj);\n            // if (errMsg) {\n            //     throw Error(errMsg);\n            // }\n            var message = MovePointRequest.create(coverRspObj);\n            var buffer = MovePointRequest.encode(message).finish();\n\n            var messageConnect = MovePointRequest.create(AIServerConnectReponseResult);\n            var bufferConnect = MovePointRequest.encode(messageConnect).finish();\n\n            var index = test.readUInt16LE(0)\n            // var index = test.readUInt16LE(0) + 1\n\n            var msgIdRequest = 59566240;\n\n            if (index == 1){\n              // buffer = bufferConnect\n              // msgIdRequest = 1586407982\n            }\n\n            const bufIndex = Buffer.allocUnsafe(2);\n            bufIndex.writeUInt16LE(index)\n\n            const bufMsgIdRequest = Buffer.allocUnsafe(4);\n            bufMsgIdRequest.writeUInt32LE(msgIdRequest)\n\n            console.log(\"zhi:=====\" + bufMsgIdRequest.readUInt32LE(0))\n\n            var msgLength = buffer.length\n            const bufMsgLength = Buffer.allocUnsafe(4);\n            bufMsgLength.writeUInt32LE(msgLength)\n\n            const totalLength = bufIndex.length + bufMsgIdRequest.length + bufMsgLength.length + buffer.length;\n            message = Buffer.concat([bufIndex,bufMsgIdRequest,bufMsgLength,buffer], totalLength);\n            // message = Buffer.concat([buffer,bufMsgLength,bufMsgIdRequest,bufIndex], totalLength);\n          // }\n\n        // }catch(e){\n        //   message = 'json error'\n        // }\n\n        \n\n        //  var contentBuf1 = Buffer.concat([Buffer.from([0x01]), message]);\n        // //拼接结束标志\n        //     contentBuf1 = Buffer.concat([contentBuf1, Buffer.from([0x0D, 0x0A])]);\n        console.log(\"发送的消息为:\" + message)\n        sock.write(message)\n\n        }, 10000);\n\n      });\n\n      // 为这个socket实例添加一个\"close\"事件处理函数\n      sock.on('close', function() {\n       console.log('CLOSED: ' + sock.remoteAddress + ' ' + sock.remotePort);\n      });\n\n      sock.on('error', function(e) {\n        console.log('error')\n      });\n\n\n    }).listen(PORT, HOST);\n\n});\nconsole.log('Server listening on ' + HOST + ':' + PORT);\n\n\n\n\n\n\n\n\n\n"]}