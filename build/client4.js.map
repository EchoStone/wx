{"version":3,"sources":["../src/client4.js"],"names":["dgram","require","protobuf","PORT","HOST","load","err","root","AIMsg","lookupType","MovePointRequest","AIServerConnectReponse","coverRspObj","PlayerId","errMsg","verify","message","create","buffer","encode","finish","msgIdRequest","index","bufIndex","Buffer","allocUnsafe","writeUInt16LE","bufMsgIdRequest","writeUInt32LE","msgLength","length","bufMsgLength","totalLength","concat","socket","Socket","console","log","readUInt32LE","connect","write","on","msg","decode","X"],"mappings":";;AAAA;AACA,IAAIA,QAAQC,QAAQ,KAAR,CAAZ;;AAEA,IAAIC,WAAWD,QAAQ,YAAR,CAAf;AACA,IAAIE,OAAO,IAAX;AACA,IAAIC,OAAO,WAAX;;AAEAF,SAASG,IAAT,CAAc,aAAd,EAA6B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC9C,QAAID,GAAJ,EAAS;AACL,cAAMA,GAAN;AACH;;AAED,QAAIE,QAAQD,KAAKE,UAAL,CAAgB,4BAAhB,CAAZ;AACA,QAAIC,mBAAmBF,KAAvB;AACA,QAAIG,yBAAyBJ,KAAKE,UAAL,CAAgB,4BAAhB,CAA7B;;AAEA,QAAIG,cAAc;AACfC,kBAAS;AADM,KAAlB;;AAIA,QAAIC,SAASJ,iBAAiBK,MAAjB,CAAwBH,WAAxB,CAAb;AACA,QAAII,UAAUN,iBAAiBO,MAAjB,CAAwBL,WAAxB,CAAd;AACA,QAAIM,SAASR,iBAAiBS,MAAjB,CAAwBH,OAAxB,EAAiCI,MAAjC,EAAb;AACA,QAAIC,eAAe,UAAnB;AACA,QAAIC,QAAQ,CAAZ;AACA,QAAMC,WAAWC,OAAOC,WAAP,CAAmB,CAAnB,CAAjB;AACAF,aAASG,aAAT,CAAuBJ,KAAvB;;AAEA,QAAMK,kBAAkBH,OAAOC,WAAP,CAAmB,CAAnB,CAAxB;AACAE,oBAAgBC,aAAhB,CAA8BP,YAA9B;;AAEA,QAAIQ,YAAYX,OAAOY,MAAvB;AACA,QAAMC,eAAeP,OAAOC,WAAP,CAAmB,CAAnB,CAArB;AACAM,iBAAaH,aAAb,CAA2BC,SAA3B;;AAEA,QAAMG,cAAcT,SAASO,MAAT,GAAkBH,gBAAgBG,MAAlC,GAA2CC,aAAaD,MAAxD,GAAiEZ,OAAOY,MAA5F;AACAd,cAAUQ,OAAOS,MAAP,CAAc,CAACV,QAAD,EAAUI,eAAV,EAA0BI,YAA1B,EAAuCb,MAAvC,CAAd,EAA8Dc,WAA9D,CAAV;AACA,QAAIE,SAAS,IAAIlC,MAAMmC,MAAV,EAAb;;AAEQC,YAAQC,GAAR,CAAY,cAAcV,gBAAgBW,YAAhB,CAA6B,CAA7B,CAA1B;;AAER;AACA;;AAEAJ,WAAOK,OAAP,CAAepC,IAAf,EAAqBC,IAArB,EAA2B,YAAW;;AAEtCgC,gBAAQC,GAAR,CAAY,mBAAmBjC,IAAnB,GAA0B,GAA1B,GAAgCD,IAA5C;AACA;AACA;AACA;AACAiC,gBAAQC,GAAR,CAAYnB,MAAZ;AACAgB,eAAOM,KAAP,CAAaxB,OAAb;AAGH,KAVG;;AAcA;AACA;AACA;AACA,QAAIN,mBAAmBH,KAAKE,UAAL,CAAgB,sBAAhB,CAAvB;;AAGAyB,WAAOO,EAAP,CAAU,MAAV,EAAkB,UAAUC,GAAV,EAAe;AAC7B;AACAN,gBAAQC,GAAR,CAAY3B,iBAAiBiC,MAAjB,CAAwBD,GAAxB,EAA6BE,CAAzC;;AAEA;AACH,KALD;;AAQA;;AAEA;AACA;AACA;AACH,CAtED","file":"client4.js","sourcesContent":["// var dgram = require('dgram');\nvar dgram = require('net');\n\nvar protobuf = require(\"protobufjs\");\nvar PORT = 9602;\nvar HOST = '127.0.0.1';\n\nprotobuf.load(\"AIMsg.proto\", function (err, root) {\n    if (err) {\n        throw err;\n    }\n    \n    var AIMsg = root.lookupType(\"msg.AIServerConnectRequest\");\n    var MovePointRequest = AIMsg\n    var AIServerConnectReponse = root.lookupType(\"msg.AIServerConnectReponse\");\n\n    var coverRspObj = {\n       PlayerId:2931\n    };\n\n    var errMsg = MovePointRequest.verify(coverRspObj);\n    var message = MovePointRequest.create(coverRspObj);\n    var buffer = MovePointRequest.encode(message).finish();\n    var msgIdRequest = 2785961655;\n    var index = 1\n    const bufIndex = Buffer.allocUnsafe(2);\n    bufIndex.writeUInt16LE(index)\n\n    const bufMsgIdRequest = Buffer.allocUnsafe(4);\n    bufMsgIdRequest.writeUInt32LE(msgIdRequest)\n\n    var msgLength = buffer.length\n    const bufMsgLength = Buffer.allocUnsafe(4);\n    bufMsgLength.writeUInt32LE(msgLength)\n\n    const totalLength = bufIndex.length + bufMsgIdRequest.length + bufMsgLength.length + buffer.length;\n    message = Buffer.concat([bufIndex,bufMsgIdRequest,bufMsgLength,buffer], totalLength);\n    var socket = new dgram.Socket();\n\n            console.log(\"zhi:=====\" + bufMsgIdRequest.readUInt32LE(0))\n\n    // var playMsg = AIServerConnectRequest.create(playMsgObj);\n    // var bufferPlay = AIServerConnectRequest.encode(playMsg).finish();\n\n    socket.connect(PORT, HOST, function() {\n\n    console.log('CONNECTED TO: ' + HOST + ':' + PORT);\n    // 建立连接后立即向服务器发送数据，服务器将收到这些数据 \n    // socket.write('I am Chuck Norris!');\n    // socket.write(message);\n    console.log(buffer)\n    socket.write(message);\n\n\n});\n\n\n\n    //  var contentBuf1 = Buffer.concat([Buffer.from([0x01]), message]);\n    // //拼接结束标志\n    //     contentBuf1 = Buffer.concat([contentBuf1, Buffer.from([0x0D, 0x0A])]);\n    var MovePointRequest = root.lookupType(\"msg.MovePointRequest\");\n\n\n    socket.on(\"data\", function (msg) {\n        // console.log(\"[UDP-CLIENT] Received message: \" + HelloCoverRsp.decode(msg).reply + \" from \" + rinfo.address + \":\" + rinfo.port);\n        console.log(MovePointRequest.decode(msg).X);\n\n        //udpSocket = null;\n    });\n\n\n    // socket.on('error', function (err) {\n\n    //     console.log('socket err');\n    //     console.log(err);\n    // });\n});"]}